// Mocks generated by Mockito 5.4.4 from annotations
// in campus_project/test/unit/controllers/question_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:campus_project/models/question_model.dart' as _i4;
import 'package:campus_project/repositories/question_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [QuestionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionRepository extends _i1.Mock
    implements _i2.QuestionRepository {
  MockQuestionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Question>> fetchQuestions(String? authToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchQuestions,
          [authToken],
        ),
        returnValue: _i3.Future<List<_i4.Question>>.value(<_i4.Question>[]),
      ) as _i3.Future<List<_i4.Question>>);

  @override
  _i3.Future<List<_i4.Question>> searchQuestions(
    String? authToken,
    String? query,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchQuestions,
          [
            authToken,
            query,
          ],
        ),
        returnValue: _i3.Future<List<_i4.Question>>.value(<_i4.Question>[]),
      ) as _i3.Future<List<_i4.Question>>);

  @override
  _i3.Future<void> createQuestion({
    required String? authToken,
    required String? title,
    required String? description,
    required String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createQuestion,
          [],
          {
            #authToken: authToken,
            #title: title,
            #description: description,
            #tag: tag,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateQuestion({
    required String? authToken,
    required String? questionId,
    required String? title,
    required String? description,
    required String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateQuestion,
          [],
          {
            #authToken: authToken,
            #questionId: questionId,
            #title: title,
            #description: description,
            #tag: tag,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteQuestion(
    String? authToken,
    String? questionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteQuestion,
          [
            authToken,
            questionId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
