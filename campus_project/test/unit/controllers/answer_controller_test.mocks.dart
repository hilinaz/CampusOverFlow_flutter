// Mocks generated by Mockito 5.4.4 from annotations
// in campus_project/test/unit/controllers/answer_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:campus_project/models/answer_model.dart' as _i4;
import 'package:campus_project/repositories/answer_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AnswerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnswerRepository extends _i1.Mock implements _i2.AnswerRepository {
  MockAnswerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Answer>> getAnswers(
    String? questionId,
    String? authToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnswers,
          [
            questionId,
            authToken,
          ],
        ),
        returnValue: _i3.Future<List<_i4.Answer>>.value(<_i4.Answer>[]),
      ) as _i3.Future<List<_i4.Answer>>);

  @override
  _i3.Future<void> submitAnswer({
    required String? questionId,
    required String? content,
    required String? authToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitAnswer,
          [],
          {
            #questionId: questionId,
            #content: content,
            #authToken: authToken,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> editAnswer({
    required String? answerId,
    required String? content,
    required String? authToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editAnswer,
          [],
          {
            #answerId: answerId,
            #content: content,
            #authToken: authToken,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteAnswer({
    required String? answerId,
    required String? authToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAnswer,
          [],
          {
            #answerId: answerId,
            #authToken: authToken,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
