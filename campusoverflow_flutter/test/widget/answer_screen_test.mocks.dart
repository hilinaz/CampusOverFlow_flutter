// Mocks generated by Mockito 5.4.4 from annotations
// in campus_project/test/widget/answer_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:campus_project/controllers/answer_controller.dart' as _i3;
import 'package:campus_project/states/answer_state.dart' as _i2;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAnswerState_0 extends _i1.SmartFake implements _i2.AnswerState {
  _FakeAnswerState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnswerActionState_1 extends _i1.SmartFake
    implements _i2.AnswerActionState {
  _FakeAnswerActionState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnswerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnswerController extends _i1.Mock implements _i3.AnswerController {
  MockAnswerController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i4.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<_i2.AnswerState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.AnswerState>.empty(),
      ) as _i5.Stream<_i2.AnswerState>);

  @override
  _i2.AnswerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAnswerState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AnswerState);

  @override
  set state(_i2.AnswerState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.AnswerState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeAnswerState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.AnswerState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setAuthToken(String? token) => super.noSuchMethod(
        Invocation.method(
          #setAuthToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void invalidateCache(String? questionId) => super.noSuchMethod(
        Invocation.method(
          #invalidateCache,
          [questionId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> fetchAnswers(String? questionId) => (super.noSuchMethod(
        Invocation.method(
          #fetchAnswers,
          [questionId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool updateShouldNotify(
    _i2.AnswerState? old,
    _i2.AnswerState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.RemoveListener addListener(
    _i6.Listener<_i2.AnswerState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i4.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AnswerActionController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnswerActionController extends _i1.Mock
    implements _i3.AnswerActionController {
  MockAnswerActionController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i4.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<_i2.AnswerActionState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.AnswerActionState>.empty(),
      ) as _i5.Stream<_i2.AnswerActionState>);

  @override
  _i2.AnswerActionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAnswerActionState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AnswerActionState);

  @override
  set state(_i2.AnswerActionState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.AnswerActionState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeAnswerActionState_1(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.AnswerActionState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setAuthToken(String? token) => super.noSuchMethod(
        Invocation.method(
          #setAuthToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> submitAnswer({
    required String? questionId,
    required String? content,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitAnswer,
          [],
          {
            #questionId: questionId,
            #content: content,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> editAnswer({
    required String? answerId,
    required String? content,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editAnswer,
          [],
          {
            #answerId: answerId,
            #content: content,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteAnswer({required String? answerId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAnswer,
          [],
          {#answerId: answerId},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool updateShouldNotify(
    _i2.AnswerActionState? old,
    _i2.AnswerActionState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.RemoveListener addListener(
    _i6.Listener<_i2.AnswerActionState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i4.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
