// Mocks generated by Mockito 5.4.4 from annotations
// in campus_project/test/widget/ask_question_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:campus_project/controllers/question_controller.dart' as _i3;
import 'package:campus_project/states/question_state.dart' as _i2;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQuestionState_0 extends _i1.SmartFake implements _i2.QuestionState {
  _FakeQuestionState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuestionActionState_1 extends _i1.SmartFake
    implements _i2.QuestionActionState {
  _FakeQuestionActionState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [QuestionController].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionController extends _i1.Mock
    implements _i3.QuestionController {
  MockQuestionController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i4.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<_i2.QuestionState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.QuestionState>.empty(),
      ) as _i5.Stream<_i2.QuestionState>);

  @override
  _i2.QuestionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeQuestionState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.QuestionState);

  @override
  set state(_i2.QuestionState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.QuestionState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeQuestionState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.QuestionState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setAuthToken(String? token) => super.noSuchMethod(
        Invocation.method(
          #setAuthToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSearchQuery(String? query) => super.noSuchMethod(
        Invocation.method(
          #setSearchQuery,
          [query],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> fetchQuestions() => (super.noSuchMethod(
        Invocation.method(
          #fetchQuestions,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> searchQuestions(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchQuestions,
          [query],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteQuestion(String? questionId) => (super.noSuchMethod(
        Invocation.method(
          #deleteQuestion,
          [questionId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool updateShouldNotify(
    _i2.QuestionState? old,
    _i2.QuestionState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.RemoveListener addListener(
    _i6.Listener<_i2.QuestionState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i4.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [QuestionActionController].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionActionController extends _i1.Mock
    implements _i3.QuestionActionController {
  MockQuestionActionController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i4.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i5.Stream<_i2.QuestionActionState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.QuestionActionState>.empty(),
      ) as _i5.Stream<_i2.QuestionActionState>);

  @override
  _i2.QuestionActionState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeQuestionActionState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.QuestionActionState);

  @override
  set state(_i2.QuestionActionState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.QuestionActionState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeQuestionActionState_1(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.QuestionActionState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setAuthToken(String? token) => super.noSuchMethod(
        Invocation.method(
          #setAuthToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> createQuestion({
    required String? title,
    required String? description,
    required String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createQuestion,
          [],
          {
            #title: title,
            #description: description,
            #tag: tag,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateQuestion({
    required String? questionId,
    required String? title,
    required String? description,
    required String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateQuestion,
          [],
          {
            #questionId: questionId,
            #title: title,
            #description: description,
            #tag: tag,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteQuestion(String? questionId) => (super.noSuchMethod(
        Invocation.method(
          #deleteQuestion,
          [questionId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool updateShouldNotify(
    _i2.QuestionActionState? old,
    _i2.QuestionActionState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.RemoveListener addListener(
    _i6.Listener<_i2.QuestionActionState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i4.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
